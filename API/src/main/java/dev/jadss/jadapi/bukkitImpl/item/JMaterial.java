package dev.jadss.jadapi.bukkitImpl.item;

import dev.jadss.jadapi.interfaces.Copyable;
import org.bukkit.Material;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Represents a various or only one material in the Bukkit API!
 */
public final class JMaterial implements Copyable<JMaterial> {

    private static final JMaterialRegistry registry;

    public static final MaterialEnum[] VALUES = MaterialEnum.values();

    public static JMaterialRegistry getRegistryMaterials() { return registry; }

    private final MaterialEnum material;
    private final List<MaterialContainer> materials;
    private final boolean isOriginal;

    private JMaterial(MaterialEnum material, List<MaterialContainer> containers, boolean isOriginal) {
        this.material = material;
        this.materials = containers;
        this.isOriginal = isOriginal;
    }

    public Map.Entry<Material, Byte> getMaterial(Type type, CustomType... customTypes) {
//        System.out.println("Getting material " + this.material.name().toLowerCase() + " with type " + type + " and custom types " + Arrays.toString(customTypes));

        for (MaterialContainer container : materials) {
//            System.out.println("Evaluating " + container.getMaterial() + " with type " + container.getType() + ".");
//            System.out.println(((container.type == Type.BOTH && type != Type.NONE)) + "||" + (container.type == type));
            if ((container.type == Type.BOTH && type != Type.NONE) || container.type == type) {
//                System.out.println("Found a match");
                return new AbstractMap.SimpleEntry<>(container.getMaterial(), container.getData());
            }
        }

//        System.out.println("Could not find match!");
        return null;
    }

    public MaterialEnum getEnum() { return material; }
    public boolean isOriginal() { return isOriginal; }

    @Override
    public JMaterial copy() {
        return new JMaterial(material, materials.stream().map(MaterialContainer::copy).collect(Collectors.toCollection(ArrayList::new)), false);
    }

    static {
        registry = new JMaterialRegistry();

        for (MaterialEnum value : VALUES) {
            List<MaterialInfo> initialMaterials = new ArrayList<>(Arrays.asList(value.list));
            initialMaterials.add(new MaterialInfo(value.name(), (byte) 0, value.type, value.info));

            List<MaterialContainer> list = new ArrayList<>();
            for (MaterialInfo info : initialMaterials) {
                try {
                    list.add(new MaterialContainer(Material.valueOf(info.name), info.data, info.type, info.info));
                } catch(Exception ignored) {}
            }
            registry.addRegistry(new JMaterial(value, list, true));
        }
    }

    //LISTING

    public enum MaterialEnum {
        //<editor-fold desc="Bukkit materials, click to crash Intellij Idea" defaultstate="collapsed">
        AIR(Type.BOTH, new MaterialInfo[] {  }),
        STONE(Type.BOTH, new MaterialInfo[] {  }),
        GRANITE(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_GRANITE(Type.BOTH, new MaterialInfo[] {  }),
        DIORITE(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_DIORITE(Type.BOTH, new MaterialInfo[] {  }),
        ANDESITE(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_ANDESITE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE(Type.BOTH, new MaterialInfo[] {  }),
        COBBLED_DEEPSLATE(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_DEEPSLATE(Type.BOTH, new MaterialInfo[] {  }),
        CALCITE(Type.BOTH, new MaterialInfo[] {  }),
        TUFF(Type.BOTH, new MaterialInfo[] {  }),
        DRIPSTONE_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        GRASS_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        DIRT(Type.BOTH, new MaterialInfo[] {  }),
        COARSE_DIRT(Type.BOTH, new MaterialInfo[] {  }),
        PODZOL(Type.BOTH, new MaterialInfo[] {  }),
        ROOTED_DIRT(Type.BOTH, new MaterialInfo[] {  }),
        CRIMSON_NYLIUM(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_NYLIUM(Type.BOTH, new MaterialInfo[] {  }),
        COBBLESTONE(Type.BOTH, new MaterialInfo[] {  }),
        OAK_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 0, Type.BOTH) }),
        SPRUCE_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 1, Type.BOTH) }),
        BIRCH_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 2, Type.BOTH) }),
        JUNGLE_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 3, Type.BOTH) }),
        ACACIA_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 4, Type.BOTH) }),
        DARK_OAK_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 5, Type.BOTH) }),
        CRIMSON_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 0, Type.BOTH) }),
        WARPED_PLANKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD", (byte) 0, Type.BOTH) }),
        OAK_SAPLING(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SAPLING", (byte) 0, Type.BOTH) }),
        SPRUCE_SAPLING(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SAPLING", (byte) 1, Type.BOTH) }),
        BIRCH_SAPLING(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SAPLING", (byte) 2, Type.BOTH) }),
        JUNGLE_SAPLING(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SAPLING", (byte) 3, Type.BOTH) }),
        ACACIA_SAPLING(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SAPLING", (byte) 4, Type.BOTH) }),
        DARK_OAK_SAPLING(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SAPLING", (byte) 5, Type.BOTH) }),
        BEDROCK(Type.BOTH, new MaterialInfo[] {  }),
        SAND(Type.BOTH, new MaterialInfo[] {  }),
        RED_SAND(Type.BOTH, new MaterialInfo[] {  }),
        GRAVEL(Type.BOTH, new MaterialInfo[] {  }),
        COAL_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_COAL_ORE(Type.BOTH, new MaterialInfo[] {  }),
        IRON_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_IRON_ORE(Type.BOTH, new MaterialInfo[] {  }),
        COPPER_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_COPPER_ORE(Type.BOTH, new MaterialInfo[] {  }),
        GOLD_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_GOLD_ORE(Type.BOTH, new MaterialInfo[] {  }),
        REDSTONE_ORE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("GLOWING_REDSTONE_ORE", (byte) 0, Type.BLOCK) }),
        DEEPSLATE_REDSTONE_ORE(Type.BOTH, new MaterialInfo[] {  }),
        EMERALD_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_EMERALD_ORE(Type.BOTH, new MaterialInfo[] {  }),
        LAPIS_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_LAPIS_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DIAMOND_ORE(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_DIAMOND_ORE(Type.BOTH, new MaterialInfo[] {  }),
        NETHER_GOLD_ORE(Type.BOTH, new MaterialInfo[] {  }),
        NETHER_QUARTZ_ORE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("QUARTZ_ORE", (byte) 0, Type.BOTH) }),
        ANCIENT_DEBRIS(Type.BOTH, new MaterialInfo[] {  }),
        COAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        RAW_IRON_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        RAW_COPPER_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        RAW_GOLD_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        AMETHYST_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        BUDDING_AMETHYST(Type.BOTH, new MaterialInfo[] {  }),
        IRON_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        COPPER_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        GOLD_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        DIAMOND_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        NETHERITE_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        EXPOSED_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WEATHERED_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        OXIDIZED_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        EXPOSED_CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WEATHERED_CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        OXIDIZED_CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        EXPOSED_CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        WEATHERED_CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        OXIDIZED_CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        EXPOSED_CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        WEATHERED_CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        OXIDIZED_CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        WAXED_COPPER_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_EXPOSED_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_WEATHERED_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_OXIDIZED_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_EXPOSED_CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_WEATHERED_CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_OXIDIZED_CUT_COPPER(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_EXPOSED_CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_WEATHERED_CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_OXIDIZED_CUT_COPPER_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        WAXED_CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        WAXED_EXPOSED_CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        WAXED_WEATHERED_CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        WAXED_OXIDIZED_CUT_COPPER_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        OAK_LOG(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG", (byte) 0, Type.BOTH) }),
        SPRUCE_LOG(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG", (byte) 1, Type.BOTH) }),
        BIRCH_LOG(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG", (byte) 2, Type.BOTH) }),
        JUNGLE_LOG(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG", (byte) 3, Type.BOTH) }),
        ACACIA_LOG(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG_2", (byte) 0, Type.BOTH) }),
        DARK_OAK_LOG(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG_2", (byte) 1, Type.BOTH) }),
        CRIMSON_STEM(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG", (byte) 0, Type.BOTH) }),
        WARPED_STEM(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOG", (byte) 0, Type.BOTH) }),
        STRIPPED_OAK_LOG(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_SPRUCE_LOG(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_BIRCH_LOG(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_JUNGLE_LOG(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_ACACIA_LOG(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_DARK_OAK_LOG(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_CRIMSON_STEM(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_WARPED_STEM(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_OAK_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_SPRUCE_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_BIRCH_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_JUNGLE_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_ACACIA_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_DARK_OAK_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_CRIMSON_HYPHAE(Type.BOTH, new MaterialInfo[] {  }),
        STRIPPED_WARPED_HYPHAE(Type.BOTH, new MaterialInfo[] {  }),
        OAK_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        SPRUCE_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        BIRCH_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        JUNGLE_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        ACACIA_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        DARK_OAK_WOOD(Type.BOTH, new MaterialInfo[] {  }),
        CRIMSON_HYPHAE(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_HYPHAE(Type.BOTH, new MaterialInfo[] {  }),
        OAK_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES", (byte) 0, Type.BOTH) }),
        SPRUCE_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES", (byte) 1, Type.BOTH) }),
        BIRCH_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES", (byte) 2, Type.BOTH) }),
        JUNGLE_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES", (byte) 3, Type.BOTH) }),
        ACACIA_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES_2", (byte) 0, Type.BOTH) }),
        DARK_OAK_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES_2", (byte) 1, Type.BOTH) }),
        AZALEA_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES", (byte) 0, Type.BOTH) }),
        FLOWERING_AZALEA_LEAVES(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LEAVES", (byte) 0, Type.BOTH) }),
        SPONGE(Type.BOTH, new MaterialInfo[] {  }),
        WET_SPONGE(Type.BOTH, new MaterialInfo[] {  }),
        GLASS(Type.BOTH, new MaterialInfo[] {  }),
        TINTED_GLASS(Type.BOTH, new MaterialInfo[] {  }),
        LAPIS_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        CHISELED_SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        CUT_SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        COBWEB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WEB", (byte) 0, Type.BOTH) }),
        GRASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LONG_GRASS", (byte) 1, Type.BOTH) }),
        FERN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LONG_GRASS", (byte) 2, Type.BOTH) }),
        AZALEA(Type.BOTH, new MaterialInfo[] {  }),
        FLOWERING_AZALEA(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_BUSH(Type.BOTH, new MaterialInfo[] {  }),
        SEAGRASS(Type.BOTH, new MaterialInfo[] {  }),
        SEA_PICKLE(Type.BOTH, new MaterialInfo[] {  }),
        WHITE_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 0, Type.BOTH) }),
        ORANGE_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 1, Type.BOTH) }),
        MAGENTA_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 2, Type.BOTH) }),
        LIGHT_BLUE_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 3, Type.BOTH) }),
        YELLOW_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 4, Type.BOTH) }),
        LIME_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 5, Type.BOTH) }),
        PINK_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 6, Type.BOTH) }),
        GRAY_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 7, Type.BOTH) }),
        LIGHT_GRAY_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 8, Type.BOTH) }),
        CYAN_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 9, Type.BOTH) }),
        PURPLE_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 10, Type.BOTH) }),
        BLUE_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 11, Type.BOTH) }),
        BROWN_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 12, Type.BOTH) }),
        GREEN_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 13, Type.BOTH) }),
        RED_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 14, Type.BOTH) }),
        BLACK_WOOL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOL", (byte) 15, Type.BOTH) }),
        DANDELION(Type.BOTH, new MaterialInfo[] { new MaterialInfo("YELLOW_FLOWER", (byte) 0, Type.BOTH) }),
        POPPY(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 0, Type.BOTH) }),
        BLUE_ORCHID(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 1, Type.BOTH) }),
        ALLIUM(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 2, Type.BOTH) }),
        AZURE_BLUET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 3, Type.BOTH) }),
        RED_TULIP(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 4, Type.BOTH) }),
        ORANGE_TULIP(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 5, Type.BOTH) }),
        WHITE_TULIP(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 6, Type.BOTH) }),
        PINK_TULIP(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 7, Type.BOTH) }),
        OXEYE_DAISY(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_ROSE", (byte) 8, Type.BOTH) }),
        CORNFLOWER(Type.BOTH, new MaterialInfo[] {  }),
        LILY_OF_THE_VALLEY(Type.BOTH, new MaterialInfo[] {  }),
        WITHER_ROSE(Type.BOTH, new MaterialInfo[] {  }),
        SPORE_BLOSSOM(Type.BOTH, new MaterialInfo[] {  }),
        BROWN_MUSHROOM(Type.BOTH, new MaterialInfo[] {  }),
        RED_MUSHROOM(Type.BOTH, new MaterialInfo[] {  }),
        CRIMSON_FUNGUS(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_FUNGUS(Type.BOTH, new MaterialInfo[] {  }),
        CRIMSON_ROOTS(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_ROOTS(Type.BOTH, new MaterialInfo[] {  }),
        NETHER_SPROUTS(Type.BOTH, new MaterialInfo[] {  }),
        WEEPING_VINES(Type.BOTH, new MaterialInfo[] {  }),
        TWISTING_VINES(Type.BOTH, new MaterialInfo[] {  }),
        SUGAR_CANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SUGAR_CANE_BLOCK", (byte) 0, Type.BLOCK) }),
        KELP(Type.BOTH, new MaterialInfo[] {  }),
        MOSS_CARPET(Type.BOTH, new MaterialInfo[] {  }),
        MOSS_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        HANGING_ROOTS(Type.BOTH, new MaterialInfo[] {  }),
        BIG_DRIPLEAF(Type.BOTH, new MaterialInfo[] {  }),
        SMALL_DRIPLEAF(Type.BOTH, new MaterialInfo[] {  }),
        BAMBOO(Type.BOTH, new MaterialInfo[] {  }),
        OAK_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_DOUBLE_STEP", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("WOOD_STEP", (byte) 0, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SPRUCE_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_DOUBLE_STEP", (byte) 1, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("WOOD_STEP", (byte) 1, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        BIRCH_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_DOUBLE_STEP", (byte) 2, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("WOOD_STEP", (byte) 2, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        JUNGLE_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_DOUBLE_STEP", (byte) 3, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("WOOD_STEP", (byte) 3, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        ACACIA_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_DOUBLE_STEP", (byte) 4, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("WOOD_STEP", (byte) 4, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        DARK_OAK_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_DOUBLE_STEP", (byte) 5, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("WOOD_STEP", (byte) 5, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        CRIMSON_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        WARPED_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        STONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SMOOTH_STONE_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 0, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SANDSTONE_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 1, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 1, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        CUT_SANDSTONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        PETRIFIED_OAK_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 2, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 2, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        COBBLESTONE_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 3, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 3, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        BRICK_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 4, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 4, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        STONE_BRICK_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 5, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 5, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        NETHER_BRICK_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 6, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 6, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        QUARTZ_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STEP", (byte) 7, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STEP", (byte) 7, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        RED_SANDSTONE_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_STONE_SLAB2", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }), new MaterialInfo("STONE_SLAB2", (byte) 0, Type.BOTH, new CustomType[] { CustomType.SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        CUT_RED_SANDSTONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        PURPUR_SLAB(Type.BOTH, new MaterialInfo[] { new MaterialInfo("PURPUR_DOUBLE_SLAB", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.DOUBLE_SLAB }) }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        PRISMARINE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        PRISMARINE_BRICK_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        DARK_PRISMARINE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SMOOTH_QUARTZ(Type.BOTH, new MaterialInfo[] {  }),
        SMOOTH_RED_SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        SMOOTH_SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        SMOOTH_STONE(Type.BOTH, new MaterialInfo[] {  }),
        BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        BOOKSHELF(Type.BOTH, new MaterialInfo[] {  }),
        MOSSY_COBBLESTONE(Type.BOTH, new MaterialInfo[] {  }),
        OBSIDIAN(Type.BOTH, new MaterialInfo[] {  }),
        TORCH(Type.BOTH, new MaterialInfo[] {  }),
        END_ROD(Type.BOTH, new MaterialInfo[] {  }),
        CHORUS_PLANT(Type.BOTH, new MaterialInfo[] {  }),
        CHORUS_FLOWER(Type.BOTH, new MaterialInfo[] {  }),
        PURPUR_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        PURPUR_PILLAR(Type.BOTH, new MaterialInfo[] {  }),
        PURPUR_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        SPAWNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MOB_SPAWNER", (byte) 0, Type.BOTH) }),
        OAK_STAIRS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_STAIRS", (byte) 0, Type.BOTH) }),
        CHEST(Type.BOTH, new MaterialInfo[] { new MaterialInfo("LOCKED_CHEST", (byte) 0, Type.NONE) }),
        CRAFTING_TABLE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WORKBENCH", (byte) 0, Type.BOTH) }),
        FARMLAND(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SOIL", (byte) 0, Type.BOTH) }),
        FURNACE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BURNING_FURNACE", (byte) 0, Type.BLOCK) }),
        LADDER(Type.BOTH, new MaterialInfo[] {  }),
        COBBLESTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        SNOW(Type.BOTH, new MaterialInfo[] {  }),
        ICE(Type.BOTH, new MaterialInfo[] {  }),
        SNOW_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        CACTUS(Type.BOTH, new MaterialInfo[] {  }),
        CLAY(Type.BOTH, new MaterialInfo[] {  }),
        JUKEBOX(Type.BOTH, new MaterialInfo[] {  }),
        OAK_FENCE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("FENCE", (byte) 0, Type.BOTH) }),
        SPRUCE_FENCE(Type.BOTH, new MaterialInfo[] {  }),
        BIRCH_FENCE(Type.BOTH, new MaterialInfo[] {  }),
        JUNGLE_FENCE(Type.BOTH, new MaterialInfo[] {  }),
        ACACIA_FENCE(Type.BOTH, new MaterialInfo[] {  }),
        DARK_OAK_FENCE(Type.BOTH, new MaterialInfo[] {  }),
        CRIMSON_FENCE(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_FENCE(Type.BOTH, new MaterialInfo[] {  }),
        PUMPKIN(Type.BOTH, new MaterialInfo[] {  }),
        CARVED_PUMPKIN(Type.BOTH, new MaterialInfo[] {  }),
        JACK_O_LANTERN(Type.BOTH, new MaterialInfo[] {  }),
        NETHERRACK(Type.BOTH, new MaterialInfo[] {  }),
        SOUL_SAND(Type.BOTH, new MaterialInfo[] {  }),
        SOUL_SOIL(Type.BOTH, new MaterialInfo[] {  }),
        BASALT(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BASALT(Type.BOTH, new MaterialInfo[] {  }),
        SMOOTH_BASALT(Type.BOTH, new MaterialInfo[] {  }),
        SOUL_TORCH(Type.BOTH, new MaterialInfo[] {  }),
        GLOWSTONE(Type.BOTH, new MaterialInfo[] {  }),
        INFESTED_STONE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MONSTER_EGGS", (byte) 0, Type.BOTH) }),
        INFESTED_COBBLESTONE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MONSTER_EGGS", (byte) 1, Type.BOTH) }),
        INFESTED_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MONSTER_EGGS", (byte) 2, Type.BOTH) }),
        INFESTED_MOSSY_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MONSTER_EGGS", (byte) 3, Type.BOTH) }),
        INFESTED_CRACKED_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MONSTER_EGGS", (byte) 4, Type.BOTH) }),
        INFESTED_CHISELED_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MONSTER_EGGS", (byte) 5, Type.BOTH) }),
        INFESTED_DEEPSLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MONSTER_EGGS", (byte) 0, Type.BOTH) }),
        STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SMOOTH_BRICK", (byte) 0, Type.BOTH) }),
        MOSSY_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SMOOTH_BRICK", (byte) 1, Type.BOTH) }),
        CRACKED_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SMOOTH_BRICK", (byte) 2, Type.BOTH) }),
        CHISELED_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SMOOTH_BRICK", (byte) 3, Type.BOTH) }),
        DEEPSLATE_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        CRACKED_DEEPSLATE_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_TILES(Type.BOTH, new MaterialInfo[] {  }),
        CRACKED_DEEPSLATE_TILES(Type.BOTH, new MaterialInfo[] {  }),
        CHISELED_DEEPSLATE(Type.BOTH, new MaterialInfo[] {  }),
        BROWN_MUSHROOM_BLOCK(Type.BOTH, new MaterialInfo[] { new MaterialInfo("HUGE_MUSHROOM_1", (byte) 0, Type.BOTH) }),
        RED_MUSHROOM_BLOCK(Type.BOTH, new MaterialInfo[] { new MaterialInfo("HUGE_MUSHROOM_2", (byte) 0, Type.BOTH) }),
        MUSHROOM_STEM(Type.BOTH, new MaterialInfo[] {  }),
        IRON_BARS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("IRON_FENCE", (byte) 0, Type.BOTH) }),
        CHAIN(Type.BOTH, new MaterialInfo[] {  }),
        GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("THIN_GLASS", (byte) 0, Type.BOTH) }),
        MELON(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MELON_BLOCK", (byte) 0, Type.BOTH) }),
        VINE(Type.BOTH, new MaterialInfo[] {  }),
        GLOW_LICHEN(Type.BOTH, new MaterialInfo[] {  }),
        BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        STONE_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SMOOTH_STAIRS", (byte) 0, Type.BOTH) }),
        MYCELIUM(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MYCEL", (byte) 0, Type.BOTH) }),
        LILY_PAD(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WATER_LILY", (byte) 0, Type.BOTH) }),
        NETHER_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        CRACKED_NETHER_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        CHISELED_NETHER_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        NETHER_BRICK_FENCE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("NETHER_FENCE", (byte) 0, Type.BOTH) }),
        NETHER_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        ENCHANTING_TABLE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("ENCHANTMENT_TABLE", (byte) 0, Type.BOTH) }),
        END_PORTAL_FRAME(Type.BOTH, new MaterialInfo[] { new MaterialInfo("ENDER_PORTAL_FRAME", (byte) 0, Type.BOTH) }),
        END_STONE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("ENDER_STONE", (byte) 0, Type.BOTH) }),
        END_STONE_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("END_BRICKS", (byte) 0, Type.BOTH) }),
        DRAGON_EGG(Type.BOTH, new MaterialInfo[] {  }),
        SANDSTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        ENDER_CHEST(Type.BOTH, new MaterialInfo[] {  }),
        EMERALD_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        SPRUCE_STAIRS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SPRUCE_WOOD_STAIRS", (byte) 0, Type.BOTH) }),
        BIRCH_STAIRS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BIRCH_WOOD_STAIRS", (byte) 0, Type.BOTH) }),
        JUNGLE_STAIRS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("JUNGLE_WOOD_STAIRS", (byte) 0, Type.BOTH) }),
        CRIMSON_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        COMMAND_BLOCK(Type.BOTH, new MaterialInfo[] { new MaterialInfo("COMMAND", (byte) 0, Type.BOTH) }),
        BEACON(Type.BOTH, new MaterialInfo[] {  }),
        COBBLESTONE_WALL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("COBBLE_WALL", (byte) 0, Type.BOTH) }),
        MOSSY_COBBLESTONE_WALL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("COBBLE_WALL", (byte) 1, Type.BOTH) }),
        BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        PRISMARINE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        RED_SANDSTONE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        MOSSY_STONE_BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        GRANITE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        STONE_BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        NETHER_BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        ANDESITE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        RED_NETHER_BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        SANDSTONE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        END_STONE_BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        DIORITE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        BLACKSTONE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BLACKSTONE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BLACKSTONE_BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        COBBLED_DEEPSLATE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_DEEPSLATE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_BRICK_WALL(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_TILE_WALL(Type.BOTH, new MaterialInfo[] {  }),
        ANVIL(Type.BOTH, new MaterialInfo[] {  }),
        CHIPPED_ANVIL(Type.BOTH, new MaterialInfo[] {  }),
        DAMAGED_ANVIL(Type.BOTH, new MaterialInfo[] {  }),
        CHISELED_QUARTZ_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        QUARTZ_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        QUARTZ_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        QUARTZ_PILLAR(Type.BOTH, new MaterialInfo[] {  }),
        QUARTZ_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        WHITE_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 0, Type.BOTH) }),
        ORANGE_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 1, Type.BOTH) }),
        MAGENTA_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 2, Type.BOTH) }),
        LIGHT_BLUE_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 3, Type.BOTH) }),
        YELLOW_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 4, Type.BOTH) }),
        LIME_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 5, Type.BOTH) }),
        PINK_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 6, Type.BOTH) }),
        GRAY_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 7, Type.BOTH) }),
        LIGHT_GRAY_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 8, Type.BOTH) }),
        CYAN_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 9, Type.BOTH) }),
        PURPLE_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 10, Type.BOTH) }),
        BLUE_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 11, Type.BOTH) }),
        BROWN_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 12, Type.BOTH) }),
        GREEN_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 13, Type.BOTH) }),
        RED_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 14, Type.BOTH) }),
        BLACK_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_CLAY", (byte) 15, Type.BOTH) }),
        BARRIER(Type.BOTH, new MaterialInfo[] {  }),
        LIGHT(Type.BOTH, new MaterialInfo[] {  }),
        HAY_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        WHITE_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 0, Type.BOTH) }),
        ORANGE_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 1, Type.BOTH) }),
        MAGENTA_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 2, Type.BOTH) }),
        LIGHT_BLUE_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 3, Type.BOTH) }),
        YELLOW_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 4, Type.BOTH) }),
        LIME_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 5, Type.BOTH) }),
        PINK_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 6, Type.BOTH) }),
        GRAY_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 7, Type.BOTH) }),
        LIGHT_GRAY_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 8, Type.BOTH) }),
        CYAN_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 9, Type.BOTH) }),
        PURPLE_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 10, Type.BOTH) }),
        BLUE_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 11, Type.BOTH) }),
        BROWN_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 12, Type.BOTH) }),
        GREEN_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 13, Type.BOTH) }),
        RED_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 14, Type.BOTH) }),
        BLACK_CARPET(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CARPET", (byte) 15, Type.BOTH) }),
        TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("HARD_CLAY", (byte) 0, Type.BOTH) }),
        PACKED_ICE(Type.BOTH, new MaterialInfo[] {  }),
        ACACIA_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        DARK_OAK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        DIRT_PATH(Type.BOTH, new MaterialInfo[] { new MaterialInfo("GRASS_PATH", (byte) 0, Type.BOTH) }),
        SUNFLOWER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_PLANT", (byte) 0, Type.BOTH) }),
        LILAC(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_PLANT", (byte) 1, Type.BOTH) }),
        ROSE_BUSH(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_PLANT", (byte) 4, Type.BOTH) }),
        PEONY(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_PLANT", (byte) 5, Type.BOTH) }),
        TALL_GRASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_PLANT", (byte) 2, Type.BOTH) }),
        LARGE_FERN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DOUBLE_PLANT", (byte) 3, Type.BOTH) }),
        WHITE_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 0, Type.BOTH) }),
        ORANGE_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 1, Type.BOTH) }),
        MAGENTA_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 2, Type.BOTH) }),
        LIGHT_BLUE_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 3, Type.BOTH) }),
        YELLOW_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 4, Type.BOTH) }),
        LIME_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 5, Type.BOTH) }),
        PINK_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 6, Type.BOTH) }),
        GRAY_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 7, Type.BOTH) }),
        LIGHT_GRAY_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 8, Type.BOTH) }),
        CYAN_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 9, Type.BOTH) }),
        PURPLE_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 10, Type.BOTH) }),
        BLUE_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 11, Type.BOTH) }),
        BROWN_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 12, Type.BOTH) }),
        GREEN_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 13, Type.BOTH) }),
        RED_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 14, Type.BOTH) }),
        BLACK_STAINED_GLASS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS", (byte) 15, Type.BOTH) }),
        WHITE_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 0, Type.BOTH) }),
        ORANGE_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 1, Type.BOTH) }),
        MAGENTA_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 2, Type.BOTH) }),
        LIGHT_BLUE_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 3, Type.BOTH) }),
        YELLOW_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 4, Type.BOTH) }),
        LIME_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 5, Type.BOTH) }),
        PINK_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 6, Type.BOTH) }),
        GRAY_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 7, Type.BOTH) }),
        LIGHT_GRAY_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 8, Type.BOTH) }),
        CYAN_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 9, Type.BOTH) }),
        PURPLE_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 10, Type.BOTH) }),
        BLUE_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 11, Type.BOTH) }),
        BROWN_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 12, Type.BOTH) }),
        GREEN_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 13, Type.BOTH) }),
        RED_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 14, Type.BOTH) }),
        BLACK_STAINED_GLASS_PANE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STAINED_GLASS_PANE", (byte) 15, Type.BOTH) }),
        PRISMARINE(Type.BOTH, new MaterialInfo[] {  }),
        PRISMARINE_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        DARK_PRISMARINE(Type.BOTH, new MaterialInfo[] {  }),
        PRISMARINE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        PRISMARINE_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        DARK_PRISMARINE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        SEA_LANTERN(Type.BOTH, new MaterialInfo[] {  }),
        RED_SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        CHISELED_RED_SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        CUT_RED_SANDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        RED_SANDSTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        REPEATING_COMMAND_BLOCK(Type.BOTH, new MaterialInfo[] { new MaterialInfo("COMMAND", (byte) 0, Type.BOTH), new MaterialInfo("COMMAND_REPEATING", (byte) 0, Type.BOTH) }),
        CHAIN_COMMAND_BLOCK(Type.BOTH, new MaterialInfo[] { new MaterialInfo("COMMAND", (byte) 0, Type.BOTH), new MaterialInfo("COMMAND_CHAIN", (byte) 0, Type.BOTH) }),
        MAGMA_BLOCK(Type.BOTH, new MaterialInfo[] { new MaterialInfo("MAGMA", (byte) 0, Type.BOTH) }),
        NETHER_WART_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_WART_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        RED_NETHER_BRICKS(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RED_NETHER_BRICK", (byte) 0, Type.BOTH) }),
        BONE_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        STRUCTURE_VOID(Type.BOTH, new MaterialInfo[] {  }),
        SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        WHITE_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        ORANGE_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        MAGENTA_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        LIGHT_BLUE_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        YELLOW_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        LIME_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        PINK_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        GRAY_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        LIGHT_GRAY_SHULKER_BOX(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SILVER_SHULKER_BOX", (byte) 0, Type.BOTH) }),
        CYAN_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        PURPLE_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        BLUE_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        BROWN_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        GREEN_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        RED_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        BLACK_SHULKER_BOX(Type.BOTH, new MaterialInfo[] {  }),
        WHITE_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        ORANGE_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        MAGENTA_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        LIGHT_BLUE_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        YELLOW_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        LIME_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        PINK_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        GRAY_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        LIGHT_GRAY_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SILVER_GLAZED_TERRACOTTA", (byte) 0, Type.BOTH) }),
        CYAN_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        PURPLE_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        BLUE_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        BROWN_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        GREEN_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        RED_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        BLACK_GLAZED_TERRACOTTA(Type.BOTH, new MaterialInfo[] {  }),
        WHITE_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 0, Type.BOTH) }),
        ORANGE_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 1, Type.BOTH) }),
        MAGENTA_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 2, Type.BOTH) }),
        LIGHT_BLUE_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 3, Type.BOTH) }),
        YELLOW_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 4, Type.BOTH) }),
        LIME_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 5, Type.BOTH) }),
        PINK_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 6, Type.BOTH) }),
        GRAY_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 7, Type.BOTH) }),
        LIGHT_GRAY_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 8, Type.BOTH) }),
        CYAN_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 9, Type.BOTH) }),
        PURPLE_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 10, Type.BOTH) }),
        BLUE_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 11, Type.BOTH) }),
        BROWN_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 12, Type.BOTH) }),
        GREEN_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 13, Type.BOTH) }),
        RED_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 14, Type.BOTH) }),
        BLACK_CONCRETE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE", (byte) 15, Type.BOTH) }),
        WHITE_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 0, Type.BOTH) }),
        ORANGE_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 1, Type.BOTH) }),
        MAGENTA_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 2, Type.BOTH) }),
        LIGHT_BLUE_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 3, Type.BOTH) }),
        YELLOW_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 4, Type.BOTH) }),
        LIME_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 5, Type.BOTH) }),
        PINK_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 6, Type.BOTH) }),
        GRAY_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 7, Type.BOTH) }),
        LIGHT_GRAY_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 8, Type.BOTH) }),
        CYAN_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 9, Type.BOTH) }),
        PURPLE_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 10, Type.BOTH) }),
        BLUE_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 11, Type.BOTH) }),
        BROWN_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 12, Type.BOTH) }),
        GREEN_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 13, Type.BOTH) }),
        RED_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 14, Type.BOTH) }),
        BLACK_CONCRETE_POWDER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CONCRETE_POWDER", (byte) 15, Type.BOTH) }),
        TURTLE_EGG(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_TUBE_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_BRAIN_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_BUBBLE_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_FIRE_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_HORN_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        TUBE_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        BRAIN_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        BUBBLE_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        FIRE_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        HORN_CORAL_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        TUBE_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        BRAIN_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        BUBBLE_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        FIRE_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        HORN_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_BRAIN_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_BUBBLE_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_FIRE_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_HORN_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_TUBE_CORAL(Type.BOTH, new MaterialInfo[] {  }),
        TUBE_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        BRAIN_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        BUBBLE_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        FIRE_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        HORN_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_TUBE_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_BRAIN_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_BUBBLE_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_FIRE_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        DEAD_HORN_CORAL_FAN(Type.BOTH, new MaterialInfo[] {  }),
        BLUE_ICE(Type.BOTH, new MaterialInfo[] {  }),
        CONDUIT(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_GRANITE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        SMOOTH_RED_SANDSTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        MOSSY_STONE_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_DIORITE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        MOSSY_COBBLESTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        END_STONE_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        STONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        SMOOTH_SANDSTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        SMOOTH_QUARTZ_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        GRANITE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        ANDESITE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        RED_NETHER_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_ANDESITE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        DIORITE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        COBBLED_DEEPSLATE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_DEEPSLATE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        DEEPSLATE_TILE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_GRANITE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SMOOTH_RED_SANDSTONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        MOSSY_STONE_BRICK_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        POLISHED_DIORITE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        MOSSY_COBBLESTONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        END_STONE_BRICK_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SMOOTH_SANDSTONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SMOOTH_QUARTZ_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        GRANITE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        ANDESITE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        RED_NETHER_BRICK_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        POLISHED_ANDESITE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        DIORITE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        COBBLED_DEEPSLATE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        POLISHED_DEEPSLATE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        DEEPSLATE_BRICK_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        DEEPSLATE_TILE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        SCAFFOLDING(Type.BOTH, new MaterialInfo[] {  }),
        REDSTONE(Type.ITEM, new MaterialInfo[] {  }),
        REDSTONE_TORCH(Type.BOTH, new MaterialInfo[] { new MaterialInfo("REDSTONE_TORCH_OFF", (byte) 0, Type.BLOCK), new MaterialInfo("REDSTONE_TORCH_ON", (byte) 0, Type.BOTH) }),
        REDSTONE_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        REPEATER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DIODE_BLOCK_OFF", (byte) 0, Type.BLOCK), new MaterialInfo("DIODE_BLOCK_ON", (byte) 0, Type.BLOCK), new MaterialInfo("DIODE", (byte) 0, Type.ITEM) }),
        COMPARATOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("REDSTONE_COMPARATOR_OFF", (byte) 0, Type.BLOCK), new MaterialInfo("REDSTONE_COMPARATOR_ON", (byte) 0, Type.BLOCK), new MaterialInfo("REDSTONE_COMPARATOR", (byte) 0, Type.ITEM) }),
        PISTON(Type.BOTH, new MaterialInfo[] { new MaterialInfo("PISTON_BASE", (byte) 0, Type.BOTH) }),
        STICKY_PISTON(Type.BOTH, new MaterialInfo[] { new MaterialInfo("PISTON_STICKY_BASE", (byte) 0, Type.BOTH) }),
        SLIME_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        HONEY_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        OBSERVER(Type.BOTH, new MaterialInfo[] {  }),
        HOPPER(Type.BOTH, new MaterialInfo[] {  }),
        DISPENSER(Type.BOTH, new MaterialInfo[] {  }),
        DROPPER(Type.BOTH, new MaterialInfo[] {  }),
        LECTERN(Type.BOTH, new MaterialInfo[] {  }),
        TARGET(Type.BOTH, new MaterialInfo[] {  }),
        LEVER(Type.BOTH, new MaterialInfo[] {  }),
        LIGHTNING_ROD(Type.BOTH, new MaterialInfo[] {  }),
        DAYLIGHT_DETECTOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DAYLIGHT_DETECTOR_INVERTED", (byte) 0, Type.BLOCK) }),
        SCULK_SENSOR(Type.BOTH, new MaterialInfo[] {  }),
        TRIPWIRE_HOOK(Type.BOTH, new MaterialInfo[] {  }),
        TRAPPED_CHEST(Type.BOTH, new MaterialInfo[] {  }),
        TNT(Type.BOTH, new MaterialInfo[] {  }),
        REDSTONE_LAMP(Type.BOTH, new MaterialInfo[] { new MaterialInfo("REDSTONE_LAMP_OFF", (byte) 0, Type.BOTH), new MaterialInfo("REDSTONE_LAMP_ON", (byte) 0, Type.BLOCK) }),
        NOTE_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        STONE_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BLACKSTONE_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        OAK_BUTTON(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_BUTTON", (byte) 0, Type.BOTH) }),
        SPRUCE_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        BIRCH_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        JUNGLE_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        ACACIA_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        DARK_OAK_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        CRIMSON_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_BUTTON(Type.BOTH, new MaterialInfo[] {  }),
        STONE_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STONE_PLATE", (byte) 0, Type.BOTH) }),
        POLISHED_BLACKSTONE_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STONE_PLATE", (byte) 0, Type.BOTH) }),
        LIGHT_WEIGHTED_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("GOLD_PLATE", (byte) 0, Type.BOTH) }),
        HEAVY_WEIGHTED_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("IRON_PLATE", (byte) 0, Type.BOTH) }),
        OAK_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        SPRUCE_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        BIRCH_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        JUNGLE_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        ACACIA_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        DARK_OAK_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        CRIMSON_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        WARPED_PRESSURE_PLATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOOD_PLATE", (byte) 0, Type.BOTH) }),
        IRON_DOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("IRON_DOOR_BLOCK", (byte) 0, Type.BLOCK) }),
        OAK_DOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("WOODEN_DOOR", (byte) 0, Type.BLOCK), new MaterialInfo("WOOD_DOOR", (byte) 0, Type.ITEM) }),
        SPRUCE_DOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SPRUCE_DOOR_ITEM", (byte) 0, Type.ITEM) }),
        BIRCH_DOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BIRCH_DOOR_ITEM", (byte) 0, Type.ITEM) }),
        JUNGLE_DOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("JUNGLE_DOOR_ITEM", (byte) 0, Type.ITEM) }),
        ACACIA_DOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("ACACIA_DOOR_ITEM", (byte) 0, Type.ITEM) }),
        DARK_OAK_DOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("DARK_OAK_DOOR_ITEM", (byte) 0, Type.ITEM) }),
        CRIMSON_DOOR(Type.BOTH, new MaterialInfo[] {  }),
        WARPED_DOOR(Type.BOTH, new MaterialInfo[] {  }),
        IRON_TRAPDOOR(Type.BOTH, new MaterialInfo[] {  }),
        OAK_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        SPRUCE_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        BIRCH_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        JUNGLE_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        ACACIA_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        DARK_OAK_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        CRIMSON_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        WARPED_TRAPDOOR(Type.BOTH, new MaterialInfo[] { new MaterialInfo("TRAP_DOOR", (byte) 0, Type.BOTH) }),
        OAK_FENCE_GATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("FENCE_GATE", (byte) 0, Type.BOTH) }),
        SPRUCE_FENCE_GATE(Type.BOTH, new MaterialInfo[] {  }),
        BIRCH_FENCE_GATE(Type.BOTH, new MaterialInfo[] {  }),
        JUNGLE_FENCE_GATE(Type.BOTH, new MaterialInfo[] {  }),
        ACACIA_FENCE_GATE(Type.BOTH, new MaterialInfo[] {  }),
        DARK_OAK_FENCE_GATE(Type.BOTH, new MaterialInfo[] {  }),
        CRIMSON_FENCE_GATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("FENCE_GATE", (byte) 0, Type.BOTH) }),
        WARPED_FENCE_GATE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("FENCE_GATE", (byte) 0, Type.BOTH) }),
        POWERED_RAIL(Type.BOTH, new MaterialInfo[] {  }),
        DETECTOR_RAIL(Type.BOTH, new MaterialInfo[] {  }),
        RAIL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("RAILS", (byte) 0, Type.BOTH) }),
        ACTIVATOR_RAIL(Type.BOTH, new MaterialInfo[] {  }),
        SADDLE(Type.ITEM, new MaterialInfo[] {  }),
        MINECART(Type.ITEM, new MaterialInfo[] {  }),
        CHEST_MINECART(Type.ITEM, new MaterialInfo[] { new MaterialInfo("STORAGE_MINECART", (byte) 0, Type.ITEM) }),
        FURNACE_MINECART(Type.ITEM, new MaterialInfo[] { new MaterialInfo("POWERED_MINECART", (byte) 0, Type.ITEM) }),
        TNT_MINECART(Type.ITEM, new MaterialInfo[] { new MaterialInfo("EXPLOSIVE_MINECART", (byte) 0, Type.ITEM) }),
        HOPPER_MINECART(Type.ITEM, new MaterialInfo[] {  }),
        CARROT_ON_A_STICK(Type.ITEM, new MaterialInfo[] { new MaterialInfo("CARROT_STICK", (byte) 0, Type.ITEM) }),
        WARPED_FUNGUS_ON_A_STICK(Type.ITEM, new MaterialInfo[] {  }),
        ELYTRA(Type.ITEM, new MaterialInfo[] {  }),
        OAK_BOAT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("BOAT", (byte) 0, Type.ITEM) }),
        SPRUCE_BOAT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("BOAT_SPRUCE", (byte) 0, Type.ITEM) }),
        BIRCH_BOAT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("BOAT_BIRCH", (byte) 0, Type.ITEM) }),
        JUNGLE_BOAT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("BOAT_JUNGLE", (byte) 0, Type.ITEM) }),
        ACACIA_BOAT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("BOAT_ACACIA", (byte) 0, Type.ITEM) }),
        DARK_OAK_BOAT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("BOAT_DARK_OAK", (byte) 0, Type.ITEM) }),
        STRUCTURE_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        JIGSAW(Type.BOTH, new MaterialInfo[] {  }),
        TURTLE_HELMET(Type.ITEM, new MaterialInfo[] {  }),
        SCUTE(Type.ITEM, new MaterialInfo[] {  }),
        FLINT_AND_STEEL(Type.ITEM, new MaterialInfo[] {  }),
        APPLE(Type.ITEM, new MaterialInfo[] {  }),
        BOW(Type.ITEM, new MaterialInfo[] {  }),
        ARROW(Type.ITEM, new MaterialInfo[] {  }),
        COAL(Type.ITEM, new MaterialInfo[] {  }),
        CHARCOAL(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND(Type.ITEM, new MaterialInfo[] {  }),
        EMERALD(Type.ITEM, new MaterialInfo[] {  }),
        LAPIS_LAZULI(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 4, Type.ITEM) }),
        QUARTZ(Type.ITEM, new MaterialInfo[] {  }),
        AMETHYST_SHARD(Type.ITEM, new MaterialInfo[] {  }),
        RAW_IRON(Type.ITEM, new MaterialInfo[] {  }),
        IRON_INGOT(Type.ITEM, new MaterialInfo[] {  }),
        RAW_COPPER(Type.ITEM, new MaterialInfo[] {  }),
        COPPER_INGOT(Type.ITEM, new MaterialInfo[] {  }),
        RAW_GOLD(Type.ITEM, new MaterialInfo[] {  }),
        GOLD_INGOT(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_INGOT(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_SCRAP(Type.ITEM, new MaterialInfo[] {  }),
        WOODEN_SWORD(Type.ITEM, new MaterialInfo[] { new MaterialInfo("WOOD_SWORD", (byte) 0, Type.ITEM) }),
        WOODEN_SHOVEL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("WOOD_SPADE", (byte) 0, Type.ITEM) }),
        WOODEN_PICKAXE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("WOOD_PICKAXE", (byte) 0, Type.ITEM) }),
        WOODEN_AXE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("WOOD_AXE", (byte) 0, Type.ITEM) }),
        WOODEN_HOE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("WOOD_HOE", (byte) 0, Type.ITEM) }),
        STONE_SWORD(Type.ITEM, new MaterialInfo[] {  }),
        STONE_SHOVEL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("STONE_SPADE", (byte) 0, Type.ITEM) }),
        STONE_PICKAXE(Type.ITEM, new MaterialInfo[] {  }),
        STONE_AXE(Type.ITEM, new MaterialInfo[] {  }),
        STONE_HOE(Type.ITEM, new MaterialInfo[] {  }),
        GOLDEN_SWORD(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_SWORD", (byte) 0, Type.ITEM) }),
        GOLDEN_SHOVEL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_SPADE", (byte) 0, Type.ITEM) }),
        GOLDEN_PICKAXE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_PICKAXE", (byte) 0, Type.ITEM) }),
        GOLDEN_AXE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_AXE", (byte) 0, Type.ITEM) }),
        GOLDEN_HOE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_HOE", (byte) 0, Type.ITEM) }),
        IRON_SWORD(Type.ITEM, new MaterialInfo[] {  }),
        IRON_SHOVEL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("IRON_SPADE", (byte) 0, Type.ITEM) }),
        IRON_PICKAXE(Type.ITEM, new MaterialInfo[] {  }),
        IRON_AXE(Type.ITEM, new MaterialInfo[] {  }),
        IRON_HOE(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_SWORD(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_SHOVEL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("DIAMOND_SPADE", (byte) 0, Type.ITEM) }),
        DIAMOND_PICKAXE(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_AXE(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_HOE(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_SWORD(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_SHOVEL(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_PICKAXE(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_AXE(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_HOE(Type.ITEM, new MaterialInfo[] {  }),
        STICK(Type.ITEM, new MaterialInfo[] {  }),
        BOWL(Type.ITEM, new MaterialInfo[] {  }),
        MUSHROOM_STEW(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MUSHROOM_SOUP", (byte) 0, Type.ITEM) }),
        STRING(Type.ITEM, new MaterialInfo[] {  }),
        FEATHER(Type.ITEM, new MaterialInfo[] {  }),
        GUNPOWDER(Type.ITEM, new MaterialInfo[] { new MaterialInfo("SULPHUR", (byte) 0, Type.ITEM) }),
        WHEAT_SEEDS(Type.ITEM, new MaterialInfo[] { new MaterialInfo("SEEDS", (byte) 0, Type.ITEM) }),
        WHEAT(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CROPS", (byte) 0, Type.BLOCK) }),
        BREAD(Type.ITEM, new MaterialInfo[] {  }),
        LEATHER_HELMET(Type.ITEM, new MaterialInfo[] {  }),
        LEATHER_CHESTPLATE(Type.ITEM, new MaterialInfo[] {  }),
        LEATHER_LEGGINGS(Type.ITEM, new MaterialInfo[] {  }),
        LEATHER_BOOTS(Type.ITEM, new MaterialInfo[] {  }),
        CHAINMAIL_HELMET(Type.ITEM, new MaterialInfo[] {  }),
        CHAINMAIL_CHESTPLATE(Type.ITEM, new MaterialInfo[] {  }),
        CHAINMAIL_LEGGINGS(Type.ITEM, new MaterialInfo[] {  }),
        CHAINMAIL_BOOTS(Type.ITEM, new MaterialInfo[] {  }),
        IRON_HELMET(Type.ITEM, new MaterialInfo[] {  }),
        IRON_CHESTPLATE(Type.ITEM, new MaterialInfo[] {  }),
        IRON_LEGGINGS(Type.ITEM, new MaterialInfo[] {  }),
        IRON_BOOTS(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_HELMET(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_CHESTPLATE(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_LEGGINGS(Type.ITEM, new MaterialInfo[] {  }),
        DIAMOND_BOOTS(Type.ITEM, new MaterialInfo[] {  }),
        GOLDEN_HELMET(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_HELMET", (byte) 0, Type.ITEM) }),
        GOLDEN_CHESTPLATE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_CHESTPLATE", (byte) 0, Type.ITEM) }),
        GOLDEN_LEGGINGS(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_LEGGINGS", (byte) 0, Type.ITEM) }),
        GOLDEN_BOOTS(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_BOOTS", (byte) 0, Type.ITEM) }),
        NETHERITE_HELMET(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_CHESTPLATE(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_LEGGINGS(Type.ITEM, new MaterialInfo[] {  }),
        NETHERITE_BOOTS(Type.ITEM, new MaterialInfo[] {  }),
        FLINT(Type.ITEM, new MaterialInfo[] {  }),
        PORKCHOP(Type.ITEM, new MaterialInfo[] { new MaterialInfo("PORK", (byte) 0, Type.ITEM) }),
        COOKED_PORKCHOP(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GRILLED_PORK", (byte) 0, Type.ITEM) }),
        PAINTING(Type.ITEM, new MaterialInfo[] {  }),
        GOLDEN_APPLE(Type.ITEM, new MaterialInfo[] {  }),
        ENCHANTED_GOLDEN_APPLE(Type.ITEM, new MaterialInfo[] {  }),
        OAK_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        SPRUCE_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        BIRCH_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        JUNGLE_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        ACACIA_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        DARK_OAK_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        CRIMSON_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        WARPED_SIGN(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SIGN", (byte) 0, Type.ITEM) }),
        BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        WATER_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        LAVA_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        POWDER_SNOW_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        SNOWBALL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("SNOW_BALL", (byte) 0, Type.ITEM) }),
        LEATHER(Type.ITEM, new MaterialInfo[] {  }),
        MILK_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        PUFFERFISH_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        SALMON_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        COD_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        TROPICAL_FISH_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        AXOLOTL_BUCKET(Type.ITEM, new MaterialInfo[] {  }),
        BRICK(Type.ITEM, new MaterialInfo[] { new MaterialInfo("CLAY_BRICK", (byte) 0, Type.ITEM) }),
        CLAY_BALL(Type.ITEM, new MaterialInfo[] {  }),
        DRIED_KELP_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        PAPER(Type.ITEM, new MaterialInfo[] {  }),
        BOOK(Type.ITEM, new MaterialInfo[] {  }),
        SLIME_BALL(Type.ITEM, new MaterialInfo[] {  }),
        EGG(Type.ITEM, new MaterialInfo[] {  }),
        COMPASS(Type.ITEM, new MaterialInfo[] {  }),
        BUNDLE(Type.ITEM, new MaterialInfo[] {  }),
        FISHING_ROD(Type.ITEM, new MaterialInfo[] {  }),
        CLOCK(Type.ITEM, new MaterialInfo[] { new MaterialInfo("WATCH", (byte) 0, Type.ITEM) }),
        SPYGLASS(Type.ITEM, new MaterialInfo[] {  }),
        GLOWSTONE_DUST(Type.ITEM, new MaterialInfo[] {  }),
        COD(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RAW_FISH", (byte) 0, Type.ITEM) }),
        SALMON(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RAW_FISH", (byte) 1, Type.ITEM) }),
        TROPICAL_FISH(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RAW_FISH", (byte) 2, Type.ITEM) }),
        PUFFERFISH(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RAW_FISH", (byte) 3, Type.ITEM) }),
        COOKED_COD(Type.ITEM, new MaterialInfo[] { new MaterialInfo("COOKED_FISH", (byte) 0, Type.ITEM) }),
        COOKED_SALMON(Type.ITEM, new MaterialInfo[] { new MaterialInfo("COOKED_FISH", (byte) 1, Type.ITEM) }),
        INK_SAC(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 0, Type.ITEM) }),
        GLOW_INK_SAC(Type.ITEM, new MaterialInfo[] {  }),
        COCOA_BEANS(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 3, Type.ITEM) }),
        WHITE_DYE(Type.ITEM, new MaterialInfo[] {  }),
        ORANGE_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 14, Type.ITEM) }),
        MAGENTA_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 13, Type.ITEM) }),
        LIGHT_BLUE_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 12, Type.ITEM) }),
        YELLOW_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("DANDELION_YELLOW", (byte) 0, Type.ITEM), new MaterialInfo("INK_SACK", (byte) 11, Type.ITEM) }),
        LIME_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 10, Type.ITEM) }),
        PINK_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 9, Type.ITEM) }),
        GRAY_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 8, Type.ITEM) }),
        LIGHT_GRAY_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 7, Type.ITEM) }),
        CYAN_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 6, Type.ITEM) }),
        PURPLE_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 5, Type.ITEM) }),
        BLUE_DYE(Type.ITEM, new MaterialInfo[] {  }),
        BROWN_DYE(Type.ITEM, new MaterialInfo[] {  }),
        GREEN_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("CACTUS_GREEN", (byte) 0, Type.ITEM), new MaterialInfo("INK_SACK", (byte) 2, Type.ITEM) }),
        RED_DYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("ROSE_RED", (byte) 0, Type.ITEM), new MaterialInfo("INK_SACK", (byte) 1, Type.ITEM) }),
        BLACK_DYE(Type.ITEM, new MaterialInfo[] {  }),
        BONE_MEAL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("INK_SACK", (byte) 15, Type.ITEM) }),
        BONE(Type.ITEM, new MaterialInfo[] {  }),
        SUGAR(Type.ITEM, new MaterialInfo[] {  }),
        CAKE(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CAKE_BLOCK", (byte) 0, Type.BLOCK) }),
        WHITE_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        ORANGE_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        MAGENTA_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        LIGHT_BLUE_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        YELLOW_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        LIME_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        PINK_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        GRAY_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        LIGHT_GRAY_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        CYAN_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        PURPLE_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        BLUE_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        BROWN_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        GREEN_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        RED_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        BLACK_BED(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BED_BLOCK", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BED }), new MaterialInfo("BED", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BED }),
        COOKIE(Type.ITEM, new MaterialInfo[] {  }),
        FILLED_MAP(Type.ITEM, new MaterialInfo[] {  }),
        SHEARS(Type.ITEM, new MaterialInfo[] {  }),
        MELON_SLICE(Type.ITEM, new MaterialInfo[] {  }),
        DRIED_KELP(Type.ITEM, new MaterialInfo[] {  }),
        PUMPKIN_SEEDS(Type.ITEM, new MaterialInfo[] {  }),
        MELON_SEEDS(Type.ITEM, new MaterialInfo[] {  }),
        BEEF(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RAW_BEEF", (byte) 0, Type.ITEM) }),
        COOKED_BEEF(Type.ITEM, new MaterialInfo[] {  }),
        CHICKEN(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RAW_CHICKEN", (byte) 0, Type.ITEM) }),
        COOKED_CHICKEN(Type.ITEM, new MaterialInfo[] {  }),
        ROTTEN_FLESH(Type.ITEM, new MaterialInfo[] {  }),
        ENDER_PEARL(Type.ITEM, new MaterialInfo[] {  }),
        BLAZE_ROD(Type.ITEM, new MaterialInfo[] {  }),
        GHAST_TEAR(Type.ITEM, new MaterialInfo[] {  }),
        GOLD_NUGGET(Type.ITEM, new MaterialInfo[] {  }),
        NETHER_WART(Type.BOTH, new MaterialInfo[] { new MaterialInfo("NETHER_WARTS", (byte) 0, Type.BLOCK), new MaterialInfo("NETHER_STALK", (byte) 0, Type.ITEM) }),
        POTION(Type.ITEM, new MaterialInfo[] {  }),
        GLASS_BOTTLE(Type.ITEM, new MaterialInfo[] {  }),
        SPIDER_EYE(Type.ITEM, new MaterialInfo[] {  }),
        FERMENTED_SPIDER_EYE(Type.ITEM, new MaterialInfo[] {  }),
        BLAZE_POWDER(Type.ITEM, new MaterialInfo[] {  }),
        MAGMA_CREAM(Type.ITEM, new MaterialInfo[] {  }),
        BREWING_STAND(Type.BOTH, new MaterialInfo[] { new MaterialInfo("BREWING_STAND_ITEM", (byte) 0, Type.ITEM) }),
        CAULDRON(Type.BOTH, new MaterialInfo[] { new MaterialInfo("CAULDRON_ITEM", (byte) 0, Type.ITEM) }),
        ENDER_EYE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("EYE_OF_ENDER", (byte) 0, Type.ITEM) }),
        GLISTERING_MELON_SLICE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("SPECKLED_MELON", (byte) 0, Type.ITEM) }),
        AXOLOTL_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        BAT_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 65, Type.ITEM) }),
        BEE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        BLAZE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 61, Type.ITEM) }),
        CAT_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        CAVE_SPIDER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 59, Type.ITEM) }),
        CHICKEN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 93, Type.ITEM) }),
        COD_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        COW_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 92, Type.ITEM) }),
        CREEPER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        DOLPHIN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        DONKEY_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 31, Type.ITEM) }),
        DROWNED_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        ELDER_GUARDIAN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 4, Type.ITEM) }),
        ENDERMAN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 58, Type.ITEM) }),
        ENDERMITE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 67, Type.ITEM) }),
        EVOKER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 34, Type.ITEM) }),
        FOX_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        GHAST_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 56, Type.ITEM) }),
        GLOW_SQUID_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        GOAT_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        GUARDIAN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 68, Type.ITEM) }),
        HOGLIN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        HORSE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 100, Type.ITEM) }),
        HUSK_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 23, Type.ITEM) }),
        LLAMA_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 103, Type.ITEM) }),
        MAGMA_CUBE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 62, Type.ITEM) }),
        MOOSHROOM_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 96, Type.ITEM) }),
        MULE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 32, Type.ITEM) }),
        OCELOT_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 98, Type.ITEM) }),
        PANDA_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        PARROT_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        PHANTOM_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        PIG_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 90, Type.ITEM) }),
        PIGLIN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        PIGLIN_BRUTE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        PILLAGER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        POLAR_BEAR_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 102, Type.ITEM) }),
        PUFFERFISH_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        RABBIT_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 101, Type.ITEM) }),
        RAVAGER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        SALMON_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        SHEEP_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 91, Type.ITEM) }),
        SHULKER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 69, Type.ITEM) }),
        SILVERFISH_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        SKELETON_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 51, Type.ITEM) }),
        SKELETON_HORSE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 28, Type.ITEM) }),
        SLIME_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 55, Type.ITEM) }),
        SPIDER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 52, Type.ITEM) }),
        SQUID_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 94, Type.ITEM) }),
        STRAY_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 6, Type.ITEM) }),
        STRIDER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        TRADER_LLAMA_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        TROPICAL_FISH_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        TURTLE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        VEX_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 35, Type.ITEM) }),
        VILLAGER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 120, Type.ITEM) }),
        VINDICATOR_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 36, Type.ITEM) }),
        WANDERING_TRADER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        WITCH_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 66, Type.ITEM) }),
        WITHER_SKELETON_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 5, Type.ITEM) }),
        WOLF_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 95, Type.ITEM) }),
        ZOGLIN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 50, Type.ITEM) }),
        ZOMBIE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 54, Type.ITEM) }),
        ZOMBIE_HORSE_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 29, Type.ITEM) }),
        ZOMBIE_VILLAGER_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("MONSTER_EGG", (byte) 27, Type.ITEM) }),
        ZOMBIFIED_PIGLIN_SPAWN_EGG(Type.ITEM, new MaterialInfo[] { new MaterialInfo("ZOMBIE_PIGMAN_SPAWN_EGG", (byte) 0, Type.ITEM), new MaterialInfo("MONSTER_EGG", (byte) 57, Type.ITEM) }),
        EXPERIENCE_BOTTLE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("EXP_BOTTLE", (byte) 0, Type.ITEM) }),
        FIRE_CHARGE(Type.ITEM, new MaterialInfo[] { new MaterialInfo("FIREBALL", (byte) 0, Type.ITEM) }),
        WRITABLE_BOOK(Type.ITEM, new MaterialInfo[] { new MaterialInfo("BOOK_AND_QUILL", (byte) 0, Type.ITEM) }),
        WRITTEN_BOOK(Type.ITEM, new MaterialInfo[] {  }),
        ITEM_FRAME(Type.ITEM, new MaterialInfo[] {  }),
        GLOW_ITEM_FRAME(Type.ITEM, new MaterialInfo[] {  }),
        FLOWER_POT(Type.BOTH, new MaterialInfo[] { new MaterialInfo("FLOWER_POT_ITEM", (byte) 0, Type.ITEM) }),
        CARROT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("CARROT_ITEM", (byte) 0, Type.ITEM) }),
        POTATO(Type.ITEM, new MaterialInfo[] { new MaterialInfo("POTATO_ITEM", (byte) 0, Type.ITEM) }),
        BAKED_POTATO(Type.ITEM, new MaterialInfo[] {  }),
        POISONOUS_POTATO(Type.ITEM, new MaterialInfo[] {  }),
        MAP(Type.ITEM, new MaterialInfo[] { new MaterialInfo("EMPTY_MAP", (byte) 0, Type.ITEM) }),
        GOLDEN_CARROT(Type.ITEM, new MaterialInfo[] {  }),
        SKELETON_SKULL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        WITHER_SKELETON_SKULL(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 1, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        PLAYER_HEAD(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 3, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        ZOMBIE_HEAD(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 2, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        CREEPER_HEAD(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 4, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        DRAGON_HEAD(Type.BOTH, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 5, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        NETHER_STAR(Type.ITEM, new MaterialInfo[] {  }),
        PUMPKIN_PIE(Type.ITEM, new MaterialInfo[] {  }),
        FIREWORK_ROCKET(Type.ITEM, new MaterialInfo[] { new MaterialInfo("FIREWORK", (byte) 0, Type.ITEM) }),
        FIREWORK_STAR(Type.ITEM, new MaterialInfo[] { new MaterialInfo("FIREWORK_CHARGE", (byte) 0, Type.ITEM) }),
        ENCHANTED_BOOK(Type.ITEM, new MaterialInfo[] {  }),
        NETHER_BRICK(Type.ITEM, new MaterialInfo[] { new MaterialInfo("NETHER_BRICK_ITEM", (byte) 0, Type.ITEM) }),
        PRISMARINE_SHARD(Type.ITEM, new MaterialInfo[] {  }),
        PRISMARINE_CRYSTALS(Type.ITEM, new MaterialInfo[] {  }),
        RABBIT(Type.ITEM, new MaterialInfo[] {  }),
        COOKED_RABBIT(Type.ITEM, new MaterialInfo[] {  }),
        RABBIT_STEW(Type.ITEM, new MaterialInfo[] {  }),
        RABBIT_FOOT(Type.ITEM, new MaterialInfo[] {  }),
        RABBIT_HIDE(Type.ITEM, new MaterialInfo[] {  }),
        ARMOR_STAND(Type.ITEM, new MaterialInfo[] {  }),
        IRON_HORSE_ARMOR(Type.ITEM, new MaterialInfo[] { new MaterialInfo("IRON_BARDING", (byte) 0, Type.ITEM) }),
        GOLDEN_HORSE_ARMOR(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_BARDING", (byte) 0, Type.ITEM) }),
        DIAMOND_HORSE_ARMOR(Type.ITEM, new MaterialInfo[] { new MaterialInfo("DIAMOND_BARDING", (byte) 0, Type.ITEM) }),
        LEATHER_HORSE_ARMOR(Type.ITEM, new MaterialInfo[] {  }),
        LEAD(Type.ITEM, new MaterialInfo[] { new MaterialInfo("LEASH", (byte) 0, Type.ITEM) }),
        NAME_TAG(Type.ITEM, new MaterialInfo[] {  }),
        COMMAND_BLOCK_MINECART(Type.ITEM, new MaterialInfo[] { new MaterialInfo("COMMAND_MINECART", (byte) 0, Type.ITEM) }),
        MUTTON(Type.ITEM, new MaterialInfo[] {  }),
        COOKED_MUTTON(Type.ITEM, new MaterialInfo[] {  }),
        WHITE_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        ORANGE_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        MAGENTA_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        LIGHT_BLUE_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        YELLOW_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        LIME_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        PINK_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        GRAY_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        LIGHT_GRAY_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        CYAN_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        PURPLE_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        BLUE_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        BROWN_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        GREEN_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        RED_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        BLACK_BANNER(Type.BOTH, new MaterialInfo[] { new MaterialInfo("STANDING_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }), new MaterialInfo("BANNER", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.BANNER }),
        END_CRYSTAL(Type.ITEM, new MaterialInfo[] {  }),
        CHORUS_FRUIT(Type.ITEM, new MaterialInfo[] {  }),
        POPPED_CHORUS_FRUIT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("CHORUS_FRUIT_POPPED", (byte) 0, Type.ITEM) }),
        BEETROOT(Type.ITEM, new MaterialInfo[] {  }),
        BEETROOT_SEEDS(Type.ITEM, new MaterialInfo[] {  }),
        BEETROOT_SOUP(Type.ITEM, new MaterialInfo[] {  }),
        DRAGON_BREATH(Type.ITEM, new MaterialInfo[] { new MaterialInfo("DRAGONS_BREATH", (byte) 0, Type.ITEM) }),
        SPLASH_POTION(Type.ITEM, new MaterialInfo[] {  }),
        SPECTRAL_ARROW(Type.ITEM, new MaterialInfo[] {  }),
        TIPPED_ARROW(Type.ITEM, new MaterialInfo[] {  }),
        LINGERING_POTION(Type.ITEM, new MaterialInfo[] {  }),
        SHIELD(Type.ITEM, new MaterialInfo[] {  }),
        TOTEM_OF_UNDYING(Type.ITEM, new MaterialInfo[] { new MaterialInfo("TOTEM", (byte) 0, Type.ITEM) }),
        SHULKER_SHELL(Type.ITEM, new MaterialInfo[] {  }),
        IRON_NUGGET(Type.ITEM, new MaterialInfo[] {  }),
        KNOWLEDGE_BOOK(Type.ITEM, new MaterialInfo[] {  }),
        DEBUG_STICK(Type.ITEM, new MaterialInfo[] {  }),
        MUSIC_DISC_13(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GOLD_RECORD", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_CAT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("GREEN_RECORD", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_BLOCKS(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_3", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_CHIRP(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_4", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_FAR(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_5", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_MALL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_6", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_MELLOHI(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_7", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_STAL(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_8", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_STRAD(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_9", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_WARD(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_10", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_11(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_11", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_WAIT(Type.ITEM, new MaterialInfo[] { new MaterialInfo("RECORD_12", (byte) 0, Type.ITEM) }),
        MUSIC_DISC_PIGSTEP(Type.ITEM, new MaterialInfo[] {  }),
        TRIDENT(Type.ITEM, new MaterialInfo[] {  }),
        PHANTOM_MEMBRANE(Type.ITEM, new MaterialInfo[] {  }),
        NAUTILUS_SHELL(Type.ITEM, new MaterialInfo[] {  }),
        HEART_OF_THE_SEA(Type.ITEM, new MaterialInfo[] {  }),
        CROSSBOW(Type.ITEM, new MaterialInfo[] {  }),
        SUSPICIOUS_STEW(Type.ITEM, new MaterialInfo[] {  }),
        LOOM(Type.BOTH, new MaterialInfo[] {  }),
        FLOWER_BANNER_PATTERN(Type.ITEM, new MaterialInfo[] {  }),
        CREEPER_BANNER_PATTERN(Type.ITEM, new MaterialInfo[] {  }),
        SKULL_BANNER_PATTERN(Type.ITEM, new MaterialInfo[] {  }),
        MOJANG_BANNER_PATTERN(Type.ITEM, new MaterialInfo[] {  }),
        GLOBE_BANNER_PATTERN(Type.ITEM, new MaterialInfo[] {  }),
        PIGLIN_BANNER_PATTERN(Type.ITEM, new MaterialInfo[] {  }),
        COMPOSTER(Type.BOTH, new MaterialInfo[] {  }),
        BARREL(Type.BOTH, new MaterialInfo[] {  }),
        SMOKER(Type.BOTH, new MaterialInfo[] {  }),
        BLAST_FURNACE(Type.BOTH, new MaterialInfo[] {  }),
        CARTOGRAPHY_TABLE(Type.BOTH, new MaterialInfo[] {  }),
        FLETCHING_TABLE(Type.BOTH, new MaterialInfo[] {  }),
        GRINDSTONE(Type.BOTH, new MaterialInfo[] {  }),
        SMITHING_TABLE(Type.BOTH, new MaterialInfo[] {  }),
        STONECUTTER(Type.BOTH, new MaterialInfo[] {  }),
        BELL(Type.BOTH, new MaterialInfo[] {  }),
        LANTERN(Type.BOTH, new MaterialInfo[] {  }),
        SOUL_LANTERN(Type.BOTH, new MaterialInfo[] {  }),
        SWEET_BERRIES(Type.ITEM, new MaterialInfo[] {  }),
        GLOW_BERRIES(Type.ITEM, new MaterialInfo[] {  }),
        CAMPFIRE(Type.BOTH, new MaterialInfo[] {  }),
        SOUL_CAMPFIRE(Type.BOTH, new MaterialInfo[] {  }),
        SHROOMLIGHT(Type.BOTH, new MaterialInfo[] {  }),
        HONEYCOMB(Type.ITEM, new MaterialInfo[] {  }),
        BEE_NEST(Type.BOTH, new MaterialInfo[] {  }),
        BEEHIVE(Type.BOTH, new MaterialInfo[] {  }),
        HONEY_BOTTLE(Type.ITEM, new MaterialInfo[] {  }),
        HONEYCOMB_BLOCK(Type.BOTH, new MaterialInfo[] {  }),
        LODESTONE(Type.BOTH, new MaterialInfo[] {  }),
        CRYING_OBSIDIAN(Type.BOTH, new MaterialInfo[] {  }),
        BLACKSTONE(Type.BOTH, new MaterialInfo[] {  }),
        BLACKSTONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        BLACKSTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        GILDED_BLACKSTONE(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BLACKSTONE(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BLACKSTONE_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        POLISHED_BLACKSTONE_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        CHISELED_POLISHED_BLACKSTONE(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BLACKSTONE_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        POLISHED_BLACKSTONE_BRICK_SLAB(Type.BOTH, new MaterialInfo[] {  }, new CustomType[] { CustomType.SLAB, CustomType.DOUBLE_SLAB }),
        POLISHED_BLACKSTONE_BRICK_STAIRS(Type.BOTH, new MaterialInfo[] {  }),
        CRACKED_POLISHED_BLACKSTONE_BRICKS(Type.BOTH, new MaterialInfo[] {  }),
        RESPAWN_ANCHOR(Type.BOTH, new MaterialInfo[] {  }),
        CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        WHITE_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        ORANGE_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        MAGENTA_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        LIGHT_BLUE_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        YELLOW_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        LIME_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        PINK_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        GRAY_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        LIGHT_GRAY_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        CYAN_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        PURPLE_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        BLUE_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        BROWN_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        GREEN_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        RED_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        BLACK_CANDLE(Type.BOTH, new MaterialInfo[] {  }),
        SMALL_AMETHYST_BUD(Type.BOTH, new MaterialInfo[] {  }),
        MEDIUM_AMETHYST_BUD(Type.BOTH, new MaterialInfo[] {  }),
        LARGE_AMETHYST_BUD(Type.BOTH, new MaterialInfo[] {  }),
        AMETHYST_CLUSTER(Type.BOTH, new MaterialInfo[] {  }),
        POINTED_DRIPSTONE(Type.BOTH, new MaterialInfo[] {  }),
        WATER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("STATIONARY_WATER", (byte) 0, Type.BLOCK) }),
        LAVA(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("STATIONARY_LAVA", (byte) 0, Type.BLOCK) }),
        TALL_SEAGRASS(Type.BLOCK, new MaterialInfo[] {  }),
        PISTON_HEAD(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("PISTON_EXTENSION", (byte) 0, Type.BLOCK) }),
        MOVING_PISTON(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("PISTON_MOVING_PIECE", (byte) 0, Type.BLOCK) }),
        WALL_TORCH(Type.BLOCK, new MaterialInfo[] {  }),
        FIRE(Type.BLOCK, new MaterialInfo[] {  }),
        SOUL_FIRE(Type.BLOCK, new MaterialInfo[] {  }),
        REDSTONE_WIRE(Type.BLOCK, new MaterialInfo[] {  }),
        OAK_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK), new MaterialInfo("SIGN_POST", (byte) 0, Type.BLOCK) }),
        SPRUCE_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK), new MaterialInfo("SIGN_POST", (byte) 0, Type.BLOCK) }),
        BIRCH_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK), new MaterialInfo("SIGN_POST", (byte) 0, Type.BLOCK) }),
        ACACIA_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK) }),
        JUNGLE_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK), new MaterialInfo("SIGN_POST", (byte) 0, Type.BLOCK) }),
        DARK_OAK_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK), new MaterialInfo("SIGN_POST", (byte) 0, Type.BLOCK) }),
        REDSTONE_WALL_TORCH(Type.BLOCK, new MaterialInfo[] {  }),
        SOUL_WALL_TORCH(Type.BLOCK, new MaterialInfo[] {  }),
        NETHER_PORTAL(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("PORTAL", (byte) 0, Type.BLOCK) }),
        ATTACHED_PUMPKIN_STEM(Type.BLOCK, new MaterialInfo[] {  }),
        ATTACHED_MELON_STEM(Type.BLOCK, new MaterialInfo[] {  }),
        PUMPKIN_STEM(Type.BLOCK, new MaterialInfo[] {  }),
        MELON_STEM(Type.BLOCK, new MaterialInfo[] {  }),
        WATER_CAULDRON(Type.BLOCK, new MaterialInfo[] {  }),
        LAVA_CAULDRON(Type.BLOCK, new MaterialInfo[] {  }),
        POWDER_SNOW_CAULDRON(Type.BLOCK, new MaterialInfo[] {  }),
        END_PORTAL(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("ENDER_PORTAL", (byte) 0, Type.BLOCK) }),
        COCOA(Type.BLOCK, new MaterialInfo[] {  }),
        TRIPWIRE(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_OAK_SAPLING(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_SPRUCE_SAPLING(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_BIRCH_SAPLING(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_JUNGLE_SAPLING(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_ACACIA_SAPLING(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_DARK_OAK_SAPLING(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_FERN(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_DANDELION(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_POPPY(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_BLUE_ORCHID(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_ALLIUM(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_AZURE_BLUET(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_RED_TULIP(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_ORANGE_TULIP(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_WHITE_TULIP(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_PINK_TULIP(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_OXEYE_DAISY(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_CORNFLOWER(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_LILY_OF_THE_VALLEY(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_WITHER_ROSE(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_RED_MUSHROOM(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_BROWN_MUSHROOM(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_DEAD_BUSH(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_CACTUS(Type.BLOCK, new MaterialInfo[] {  }),
        CARROTS(Type.BLOCK, new MaterialInfo[] {  }),
        POTATOES(Type.BLOCK, new MaterialInfo[] {  }),
        SKELETON_WALL_SKULL(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        WITHER_SKELETON_WALL_SKULL(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        ZOMBIE_WALL_HEAD(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        PLAYER_WALL_HEAD(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        CREEPER_WALL_HEAD(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        DRAGON_WALL_HEAD(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("SKULL", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.SKULL }), new MaterialInfo("SKULL_ITEM", (byte) 0, Type.ITEM) }, new CustomType[] { CustomType.SKULL }),
        WHITE_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        ORANGE_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        MAGENTA_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        LIGHT_BLUE_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        YELLOW_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        LIME_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        PINK_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        GRAY_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        LIGHT_GRAY_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        CYAN_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        PURPLE_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        BLUE_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        BROWN_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        GREEN_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        RED_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        BLACK_WALL_BANNER(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_BANNER", (byte) 0, Type.BLOCK, new CustomType[] { CustomType.BANNER }) }, new CustomType[] { CustomType.BANNER }),
        BEETROOTS(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("BEETROOT_BLOCK", (byte) 0, Type.BLOCK) }),
        END_GATEWAY(Type.BLOCK, new MaterialInfo[] {  }),
        FROSTED_ICE(Type.BLOCK, new MaterialInfo[] {  }),
        KELP_PLANT(Type.BLOCK, new MaterialInfo[] {  }),
        DEAD_TUBE_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        DEAD_BRAIN_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        DEAD_BUBBLE_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        DEAD_FIRE_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        DEAD_HORN_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        TUBE_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        BRAIN_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        BUBBLE_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        FIRE_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        HORN_CORAL_WALL_FAN(Type.BLOCK, new MaterialInfo[] {  }),
        BAMBOO_SAPLING(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_BAMBOO(Type.BLOCK, new MaterialInfo[] {  }),
        VOID_AIR(Type.BLOCK, new MaterialInfo[] {  }),
        CAVE_AIR(Type.BLOCK, new MaterialInfo[] {  }),
        BUBBLE_COLUMN(Type.BLOCK, new MaterialInfo[] {  }),
        SWEET_BERRY_BUSH(Type.BLOCK, new MaterialInfo[] {  }),
        WEEPING_VINES_PLANT(Type.BLOCK, new MaterialInfo[] {  }),
        TWISTING_VINES_PLANT(Type.BLOCK, new MaterialInfo[] {  }),
        CRIMSON_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK), new MaterialInfo("SIGN_POST", (byte) 0, Type.BLOCK) }),
        WARPED_WALL_SIGN(Type.BLOCK, new MaterialInfo[] { new MaterialInfo("WALL_SIGN", (byte) 0, Type.BLOCK), new MaterialInfo("SIGN_POST", (byte) 0, Type.BLOCK) }),
        POTTED_CRIMSON_FUNGUS(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_WARPED_FUNGUS(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_CRIMSON_ROOTS(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_WARPED_ROOTS(Type.BLOCK, new MaterialInfo[] {  }),
        CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        WHITE_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        ORANGE_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        MAGENTA_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        LIGHT_BLUE_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        YELLOW_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        LIME_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        PINK_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        GRAY_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        LIGHT_GRAY_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        CYAN_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        PURPLE_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        BLUE_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        BROWN_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        GREEN_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        RED_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        BLACK_CANDLE_CAKE(Type.BLOCK, new MaterialInfo[] {  }),
        POWDER_SNOW(Type.BLOCK, new MaterialInfo[] {  }),
        CAVE_VINES(Type.BLOCK, new MaterialInfo[] {  }),
        CAVE_VINES_PLANT(Type.BLOCK, new MaterialInfo[] {  }),
        BIG_DRIPLEAF_STEM(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_AZALEA_BUSH(Type.BLOCK, new MaterialInfo[] {  }),
        POTTED_FLOWERING_AZALEA_BUSH(Type.BLOCK, new MaterialInfo[] {  }),
        MUSIC_DISC_OTHERSIDE(Type.ITEM, new MaterialInfo[] {  });
        //</editor-fold>

        private final Type type;
        private final CustomType[] info;
        private final MaterialInfo[] list;

        MaterialEnum() {
            this.type = null;
            this.list = null;
            this.info = null;
        }
        
        MaterialEnum(Type type, MaterialInfo[] list) {
            this.type = type;
            this.list = list;
            this.info = new CustomType[0];
        }

        MaterialEnum(Type type, MaterialInfo[] list, CustomType[] info) {
            this.type = type;
            this.list = list;
            this.info = info;
        }

    }
    private static class MaterialInfo {

        private final String name;
        private final byte data;
        private final Type type;
        private final CustomType[] info;

        public MaterialInfo(String name, byte data, Type type) {
            this.name = name;
            this.data = data;
            this.type = type;
            this.info = null;
        }

        public MaterialInfo(String name, byte data, Type type, CustomType[] info) {
            this.name = name;
            this.data = data;
            this.type = type;
            this.info = info;
        }
    }

    //END OF LISTING

    //CATEGORIZING MATERIALS

    public enum CustomType {
        BED,

        DOUBLE_SLAB,
        SLAB,

        SKULL,

        BANNER;
    }

    public enum Type {
        BOTH,
        BLOCK,
        ITEM,
        NONE;
    }

    //END OF CATEGORIZING MATERIALS

    //REGISTRY OF MATERIALS.

    public static final class JMaterialRegistry {

        private final ArrayList<JMaterial> materials = new ArrayList<>();

        public JMaterialRegistry() {
            if(JMaterial.registry != null)
                throw new RuntimeException("No!");
        }

        private void addRegistry(JMaterial material) {
            this.materials.add(material);
        }

        /**
         * Searches for a material with the given name.
         * @param material The Material to search for.
         * @return The JMaterial with the given name, or null if none was found.
         */
        public JMaterial find(MaterialEnum material) {
            for (JMaterial materials : materials)
                if(materials.getEnum() == material)
                    return materials;
            return null;
        }

        /**
         * Searches for a material with the given name.
         * @param name The name of the Material to search for.
         * @return The JMaterial with the given name, or null if none was found.
         */
        public JMaterial find(String name) {
            try {
                MaterialEnum materialEnum = MaterialEnum.valueOf(name);
                return find(materialEnum);
            } catch (IllegalArgumentException ex) {
                for (JMaterial material : materials)
                    if (material.getEnum().name().equalsIgnoreCase(name))
                        return material;
                    else
                        for (MaterialContainer container : material.materials)
                            if (container.getMaterial().name().equalsIgnoreCase(name) && container.getData() == 0)
                                return material;
                return null;
            }
        }

        /**
         * Searches for a material with the given name and data.
         * @param material The Material from bukkit to search for.
         * @return The JMaterial with the given name and data, or null if none was found.
         */
        public JMaterial find(Material material) {
            return find(material.name());
        }

        /**
         * Searches for a material with the given name and data.
         * @param material The Material from bukkit to search for.
         * @param data The magical value of the Material to search for.
         * @return The JMaterial with the given name and data, or null if none was found.
         */
        public JMaterial find(Material material, byte data) {
            return find(material.name(), data);
        }

        /**
         * Searches for a material with the given name.
         * @param material The name of the Material to search for.
         * @param id The magical value of the Material to search for.
         * @return The JMaterial with the given name, or null if none was found.
         */
        public JMaterial find(String material, byte id) {
            for (JMaterial materials : this.materials)
                if (materials.material.name().equalsIgnoreCase(material))
                    return materials;
                else
                    for (MaterialContainer container : materials.materials)
                        if (container.getMaterial().name().equalsIgnoreCase(material) && container.getData() == id)
                            return materials;
            return null;
        }
    }

    /**
     * Represents a Container of a specific Material type.
     */
    private static class MaterialContainer implements Copyable<MaterialContainer> {

        private final Material material;
        private final byte data;
        private final Type type;
        private final CustomType[] info;

        public MaterialContainer(Material material, byte data, Type type, CustomType[] info) {
            this.material = material;
            this.data = data;
            this.type = type;
            this.info = info;
        }

        public Material getMaterial() { return material; }
        public byte getData() { return data; }
        public Type getType() { return type; }
        public CustomType[] getInfo() { return info; }

        @Override
        public MaterialContainer copy() {
            return new MaterialContainer(material, data, type, Arrays.copyOf(info, info.length));
        }
    }

    //END OF REGISTRY OF MATERIALS.
}
